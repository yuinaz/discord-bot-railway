import logging
import asyncio
from typing import Any, Iterable, Optional

log = logging.getLogger("smoke")

class _DummyUser:
    def __init__(self, user_id: int = 0, name: str = "dummy"):
        self.id = user_id
        self.name = name
        self.mention = f"<@{user_id}>"

    def __repr__(self) -> str:
        return f"<_DummyUser id={self.id} name={self.name!r}>"

class DummyBot:
    """Minimal bot stub for offline smoke tests.

    Implements the small subset of discord.py's Client/Bot surface that
    our cogs touch inside the smoke harness: add_cog (awaitable-friendly),
    wait_until_ready(), fetch_user(), get_user(), get_channel(),
    get_all_channels(), add_check(), get_guild().
    """

    def __init__(self) -> None:
        self._cogs: list[Any] = []
        self._checks: list[Any] = []
        # A future we can await in wait_until_ready (already done in smoke mode)
        self._ready = asyncio.get_event_loop().create_future()
        if not self._ready.done():
            self._ready.set_result(True)

    # -- Cog management --------------------------------------------------
    async def add_cog(self, cog: Any) -> None:
        """Accept both awaited and non-awaited style in the harness."""
        self._cogs.append(cog)
        log.info("smoke_utils.DummyBot.add_cog dipatch (maybeâ€‘await).")

    # -- Readiness helpers -----------------------------------------------
    async def wait_until_ready(self) -> None:
        """In smoke we are always 'ready'; this is a no-op await."""
        await asyncio.sleep(0)

    # -- Lookups used by various cogs ------------------------------------
    def get_all_channels(self) -> Iterable[Any]:
        return []

    def get_channel(self, channel_id: int) -> Optional[Any]:
        return None

    def get_user(self, user_id: int) -> Optional[_DummyUser]:
        # Return a lightweight dummy user to satisfy code paths that only
        # read attributes like .id / .mention
        return _DummyUser(user_id=user_id, name=f"user{user_id}")

    async def fetch_user(self, user_id: int) -> _DummyUser:
        # Async mirror of get_user for code that awaits .fetch_user()
        return self.get_user(user_id)  # type: ignore

    def get_guild(self, guild_id: int) -> Optional[Any]:
        return None

    # Some cogs check for global command checks
    def add_check(self, func: Any) -> None:
        self._checks.append(func)

# Some modules import _DummyBot explicitly; keep alias for compatibility.
_DummyBot = DummyBot
__all__ = ["DummyBot", "_DummyBot"]
