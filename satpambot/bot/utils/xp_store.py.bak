from __future__ import annotations

import json, os, time, threading
from typing import Dict, Any

_LOCK = threading.Lock()
_DIR = os.path.join("data", "neuro-lite")
_FILE = os.path.join(_DIR, "learn_progress_junior.json")

def _ensure_dir() -> None:
    os.makedirs(_DIR, exist_ok=True)

def _now() -> int:
    return int(time.time())

def load() -> Dict[str, Any]:
    _ensure_dir()
    if not os.path.exists(_FILE):
        return {"level": "TK", "xp": 0, "updated_at": _now()}
    try:
        with open(_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"level": "TK", "xp": 0, "updated_at": _now()}

def save(data: Dict[str, Any]) -> None:
    _ensure_dir()
    with _LOCK:
        with open(_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

def add_xp(amount: int) -> int:
    if amount <= 0:
        return load().get("xp", 0)
    with _LOCK:
        data = load()
        data["xp"] = int(data.get("xp", 0)) + int(amount)
        data["updated_at"] = _now()
        save(data)
        return data["xp"]
