
# ---- satpambot local helper (do not remove) ----
from __future__ import annotations
import inspect as _sp_inspect
async def _satpam_safe_add_cog(bot, cog):
    ret = await _satpam_safe_add_cog(cog)
    if _sp_inspect.iscoroutine(ret):
        return await ret
    return ret
# ---- end satpambot helper ----


import logging, os, discord
from satpambot.bot.modules.discord_bot.helpers.cog_utils import safe_add_cog

from discord.ext import commands

try:
    from satpambot.config.runtime import cfg
except Exception:
    def cfg(k, d=None): import os; return os.getenv(k, d)

from satpambot.bot.modules.discord_bot.utils.sticky_embed import StickyEmbed, DedupCache

log = logging.getLogger(__name__)

PHISH_LOG_CHANNEL_ID = int(cfg("PHISH_LOG_CHANNEL_ID", "0") or 0)
DEDUP_WINDOW      = int(cfg("PHISH_LOG_DEDUP_WINDOW_SEC", "86400"))

sticky = StickyEmbed()
dedup  = DedupCache(ttl_seconds=DEDUP_WINDOW)

class PhishLogStickyGuard(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        if not PHISH_LOG_CHANNEL_ID or message.channel.id != PHISH_LOG_CHANNEL_ID:
            return
        if not message.author.bot or message.pinned:
            return

        parts = [message.content or ""]
        for e in (message.embeds or []):
            parts.append(e.title or ""); parts.append(e.description or "")
        for a in (message.attachments or []):
            parts.append(a.filename or ""); parts.append(a.url or "")
        sig = DedupCache.make_sig(*parts)

        if dedup.seen(sig):
            try: await message.delete()
            except Exception: pass
            log.info("[phish-guard] duplicate suppressed and deleted")
            return

        ch = message.channel
        if not isinstance(ch, discord.TextChannel):
            return

        sticky_msg = await sticky.ensure(ch, "Anti-Image Guard — Report")
        author = getattr(message.author, "name", "bot")
        summary = message.content.strip() if (message.content and message.content.strip()) else "(no text)"
        if len(summary) > 140: summary = summary[:137] + "…"
        if message.attachments:
            summary += f"  [files={len(message.attachments)}]"

        emb = sticky_msg.embeds[0] if sticky_msg.embeds else discord.Embed(title="Anti-Image Guard — Report")
        emb.description = (f"• {author}: {summary}\n" + (emb.description or ""))[:3900]
        try:
            await sticky.update(sticky_msg, emb)
        except Exception as e:
            log.exception("update sticky failed: %s", e)

        try: await message.delete()
        except Exception: pass

async def setup(bot: commands.Bot):
    await bot.add_cog(PhishLogStickyGuard(bot))

def setup(bot: commands.Bot):
    try: await safe_add_cog(bot, PhishLogStickyGuard(bot))
    except TypeError: pass
