<<<<<<< HEAD
from __future__ import annotations

import logging
from discord.ext import commands

LOGGER = logging.getLogger(__name__)

class StatusCoalescerWildcard(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        LOGGER.info("StatusCoalescerWildcard active.")

async def setup(bot: commands.Bot):
    await bot.add_cog(StatusCoalescerWildcard(bot))
=======

import re, os, json, asyncio
from typing import Any, Dict, Optional

import discord
from discord.ext import commands

try:
    from satpambot.bot.modules.discord_bot.utils.sticky_store import StickyStore
except Exception:
    StickyStore = None  # fallback later

def _load_cfg() -> Dict[str, Any]:
    for p in ("data/local.json","data/config/local.json","local.json","config/local.json"):
        if os.path.exists(p):
            try:
                with open(p,"r",encoding="utf-8") as f:
                    return json.load(f)
            except Exception:
                pass
    return {}

DEFAULT_PATTERNS = [
    r"(?i)^satpambot status$",
    r"(?i)^bot status$",
    r"(?i)^presence.*online",
    r"(?i)^imagephish.*",
    r"(?i)^phish.*",
    r"(?i)^phash.*",
    r"(?i)anti phishing discord guard",
]

class StatusCoalescerWildcard(commands.Cog):
    """Edit-in-place for embeds with titles matching patterns to avoid spam.
    Uses sticky_store to persist the last message id per (guild, channel, title)."""

    def __init__(self, bot: commands.Bot):
        self.bot = bot
        cfg = _load_cfg()
        self.patterns = [re.compile(p) for p in cfg.get("STATUS_STICKY_PATTERNS", DEFAULT_PATTERNS)]
        self.store = StickyStore("data/sticky_presence.json") if StickyStore else None
        self._orig_send = None
        self._patch_send()

    def _patch_send(self):
        if self._orig_send is not None:
            return

        async def patched_send(this, *args, **kwargs):
            # Extract embeds
            embed = kwargs.get("embed")
            embeds = kwargs.get("embeds")
            chosen = None
            if embed and isinstance(embed, discord.Embed):
                chosen = embed
            elif embeds and isinstance(embeds, (list, tuple)) and embeds and isinstance(embeds[0], discord.Embed):
                chosen = embeds[0]

            title = (chosen.title if chosen else None) or ""
            match = any(p.search(title or "") for p in self.patterns)

            if not match or not hasattr(this, "channel"):
                # No special handling, call original
                return await self._orig_send(this, *args, **kwargs)

            channel = this.channel
            guild_id = getattr(channel.guild, "id", 0) if getattr(channel, "guild", None) else 0
            chan_id = getattr(channel, "id", 0)
            key = f"{guild_id}:{chan_id}:{title.strip()[:120]}"

            # Try fetch existing sticky id
            msg_id = None
            if self.store:
                msg_id = self.store.get_message_id(guild_id, key) or self.store.get_message_id(0, key)

            if msg_id:
                try:
                    msg = await channel.fetch_message(int(msg_id))
                    return await msg.edit(**kwargs)
                except Exception:
                    msg_id = None  # fallthrough to new send

            # Fallback: send new then remember
            sent = await self._orig_send(this, *args, **kwargs)
            if self.store and isinstance(sent, discord.Message):
                try:
                    self.store.set_message_id(guild_id, key, int(sent.id))
                    self.store.save()
                except Exception:
                    pass
            return sent

        # Patch
        target = discord.abc.Messageable.send  # type: ignore
        self._orig_send = target
        discord.abc.Messageable.send = patched_send  # type: ignore

async def setup(bot: commands.Bot):
    try:
        await bot.add_cog(StatusCoalescerWildcard(bot))
    except TypeError:
        await bot.add_cog(StatusCoalescerWildcard(bot))
def setup(bot):
    # legacy
    try:
        bot.add_cog(StatusCoalescerWildcard(bot))
    except Exception:
        StatusCoalescerWildcard(bot)
>>>>>>> ef940a8 (heal)
