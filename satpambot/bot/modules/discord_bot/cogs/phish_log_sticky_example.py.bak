<<<<<<< HEAD
from __future__ import annotations

import logging
from discord.ext import commands

LOGGER = logging.getLogger(__name__)

class PhishLogStickyExample(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

async def setup(bot: commands.Bot):
    await bot.add_cog(PhishLogStickyExample(bot))
=======

from __future__ import annotations
import logging, discord
from discord.ext import commands

try:
    from satpambot.config.runtime import cfg
except Exception:
    import os
    def cfg(k, d=None): return os.getenv(k, d)

from satpambot.bot.modules.discord_bot.utils.sticky_embed import StickyEmbed, DedupCache

log = logging.getLogger(__name__)

PHISH_LOG_CHANNEL_ID = int(cfg("PHISH_LOG_CHANNEL_ID", "0") or 0)
STICKY_STORE_PATH = cfg("STICKY_STORE_PATH", "data/state/phish_sticky.json")
DEDUP_STORE_PATH  = cfg("PHISH_DEDUP_STORE_PATH", "data/state/phish_dedup.json")
DEDUP_WINDOW      = int(cfg("PHISH_LOG_DEDUP_WINDOW_SEC", "86400"))

sticky = StickyEmbed(STICKY_STORE_PATH)
dedup  = DedupCache(DEDUP_STORE_PATH, ttl_seconds=DEDUP_WINDOW)

class PhishLogSticky(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    async def report_phish(self, author_id: int, attachment_hash: str, reason: str):
        if not PHISH_LOG_CHANNEL_ID:
            return
        ch = self.bot.get_channel(PHISH_LOG_CHANNEL_ID)
        if not isinstance(ch, discord.TextChannel):
            return
        sig = DedupCache.make_sig(str(author_id), attachment_hash, reason)
        if dedup.seen(sig):
            log.info("[phish-log] duplicate suppressed")
            return
        msg = await sticky.ensure(ch, "Anti-Image Guard — Report")
        emb = msg.embeds[0] if msg.embeds else discord.Embed(title="Anti-Image Guard — Report")
        line = f"• <@{author_id}> — `{reason}` — `{attachment_hash[:8]}`\n"
        emb.description = (line + (emb.description or ""))[:3900]
        await sticky.update(msg, emb)

async def setup(bot: commands.Bot):
    await bot.add_cog(PhishLogSticky(bot))

def setup(bot: commands.Bot):
    try: bot.add_cog(PhishLogSticky(bot))
    except TypeError: pass
>>>>>>> 377f4f2 (secure: remove local secrets; add safe example + improved pre-commit)
