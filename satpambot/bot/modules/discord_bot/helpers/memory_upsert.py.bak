#!/usr/bin/env python3
from __future__ import annotations

import json
import logging
import os
import re
from pathlib import Path
from typing import Any, Dict, List

log = logging.getLogger(__name__)

# Default skip list (non-chat channels) â€” can be extended via ENV XP_SKIP_CHANNEL_IDS
DEFAULT_SKIP_IDS = {
    '763813761814495252',
    '936689852546678885',
    '767401659390623835',
    '1270611643964850178',
    '761163966482743307',
    '1422084695692414996',
    '1372983711771001064',
    '1378739739930398811',
}

DISCORD_URL_CH_RE = re.compile(r'/channels/\d+/(\d+)/\d+')

def _get_env_skip_ids() -> set[str]:
    raw = os.getenv('XP_SKIP_CHANNEL_IDS', '').strip()
    if not raw:
        return set()
    return {x.strip() for x in raw.split(',') if x.strip()}

def _parse_channel_id_from_url(url: str) -> str | None:
    if not url:
        return None
    m = DISCORD_URL_CH_RE.search(url)
    if m:
        return m.group(1)
    return None

def _ensure_int(val: Any, default: int = 0) -> int:
    try:
        return int(val)
    except Exception:
        return default

def upsert(payload: Any, *, json_dir: str | None = None) -> bool:
    """
    Tolerant upserter untuk payload XP.
    - Menerima dict dengan key 'phish_text' (list) atau langsung list of items.
    - Skip channel berdasarkan DEFAULT_SKIP_IDS + ENV XP_SKIP_CHANNEL_IDS.
    - Simpan snapshot ke {json_dir}/last_phish_text.json.
    - Selalu return True supaya kompatibel dengan caller lama.
    """
    skip_ids = set(DEFAULT_SKIP_IDS) | _get_env_skip_ids()
    json_dir = json_dir or os.getenv('XP_JSON_DIR', 'data/neuro-lite')
    Path(json_dir).mkdir(parents=True, exist_ok=True)

    items: List[Dict[str, Any]] = []
    ts = None

    if isinstance(payload, dict):
        if 'phish_text' in payload and isinstance(payload['phish_text'], list):
            items = list(payload['phish_text'])
        elif 'items' in payload and isinstance(payload['items'], list):
            items = list(payload['items'])
        ts = payload.get('ts')
    elif isinstance(payload, list):
        items = list(payload)
    else:
        log.warning('[memory_upsert] payload format tidak dikenal: type=%s', type(payload))
        return True

    total = len(items)
    kept: List[Dict[str, Any]] = []

    for it in items:
        if not isinstance(it, dict):
            continue
        it['score'] = _ensure_int(it.get('score', 0), 0)
        ch_id = _parse_channel_id_from_url(str(it.get('url', '')))
        if ch_id:
            it['channel_id'] = ch_id
        if ch_id and ch_id in skip_ids:
            continue
        kept.append(it)

    snapshot = {
        'ts': ts,
        'total': total,
        'kept': len(kept),
        'skip_ids': sorted(skip_ids),
        'items': kept,
    }
    snap_path = Path(json_dir) / 'last_phish_text.json'
    try:
        snap_path.write_text(json.dumps(snapshot, ensure_ascii=False, indent=2), encoding='utf-8')
    except Exception as e:
        log.exception('Gagal tulis snapshot ke %s: %s', snap_path, e)

    log.info('[memory_upsert] phish_text filtered: kept=%s / total=%s', len(kept), total)
    return True

def update(payload: Any, **kwargs) -> bool:
    return upsert(payload, **kwargs)
