--- a/SatpamBot/modules/discord_bot/discord_bot.py
+++ b/SatpamBot/modules/discord_bot/discord_bot.py
@@ -47,6 +47,7 @@
 

 @bot.event

 async def on_ready():

+

     logging.info(f"✅ Bot berhasil login sebagai {bot.user} (ID: {bot.user.id})")

     logging.info(f"🌐 Mode: {FLASK_ENV}")

 

@@ -81,6 +82,22 @@
         logging.exception("on_message relay error: %s", e)

 

 # --- HTTP routes ---

+

+

+@bot.event

+async def on_message(message: discord.Message):

+    # Basic gateway for guards + commands

+    try:

+        if getattr(message, "author", None) and getattr(message.author, "bot", False):

+            return

+        from .message_handlers import handle_on_message

+        await handle_on_message(bot, message)

+    except Exception:

+        # Never let guard failures kill command processing

+        try:

+            await bot.process_commands(message)

+        except Exception:

+            pass

 @discord_bot_bp.route("/start-bot")

 def start_bot():

     if not bot.is_closed():


--- a/SatpamBot/modules/discord_bot/message_handlers.py
+++ b/SatpamBot/modules/discord_bot/message_handlers.py
@@ -55,6 +55,27 @@
         return

 

     # >>> tempatkan pre-processor lain bila perlu <<<

+    # 1) NSFW invite autoban

+    try:

+        from modules.discord_bot.handlers.invite_guard import check_nsfw_invites

+        await check_nsfw_invites(message, bot)

+    except Exception:

+        pass

+

+    # 2) URL reputation guard

+    try:

+        from modules.discord_bot.handlers.url_guard import handle_urls

+        await handle_urls(message, bot)

+    except Exception:

+        pass

+

+    # 3) Image pipeline (blacklist + OCR)

+    try:

+        from modules.discord_bot.tasks import process_image_message

+        await process_image_message(message, bot)

+    except Exception:

+        pass

+

     try:

         from modules.discord_bot.handlers.invite_guard import check_nsfw_invites

         await check_nsfw_invites(message, bot)


--- a/SatpamBot/modules/discord_bot/handlers/url_guard.py
+++ b/SatpamBot/modules/discord_bot/handlers/url_guard.py
@@ -7,11 +7,87 @@
 from urllib.parse import urlparse

 import requests

 

+

+from modules.discord_bot.helpers.url_check import extract_urls, normalize_domain, check_domain_reputation, is_shortener

+from modules.discord_bot.helpers.permissions import is_exempt_user, is_whitelisted_channel

+from modules.discord_bot.helpers.db import log_action

+from modules.discord_bot.helpers.log_utils import send_ban_embeds

+from modules.discord_bot.helpers.config_manager import get_flag

+from urllib.parse import urlparse

+

+URL_RESOLVE_ENABLED = str(get_flag("URL_RESOLVE_ENABLED", "true")).lower()=="true"

+URL_AUTOBAN_CRITICAL = str(get_flag("URL_AUTOBAN_CRITICAL","true")).lower()=="true"

+

+def _resolve(u: str, timeout: float = 4.0) -> str:

+    try:

+        import requests

+        r = requests.get(u, timeout=timeout, allow_redirects=True)

+        return r.url or u

+    except Exception:

+        return u

+

 async def _handle_urls_impl(message, bot):

-    try:

-        pass

-    except Exception:

-        pass

+    # Skip whitelisted channel/role or bots

+    try:

+        if is_whitelisted_channel(getattr(message,'channel',None)) or is_exempt_user(getattr(message,'author',None)):

+            return

+        if getattr(message.author, 'bot', False):

+            return

+        content = message.content or ''

+        urls = extract_urls(content)

+        if not urls:

+            return

+

+        suspicious = []

+        for u in urls:

+            dest = u

+            try:

+                host = urlparse(u).netloc

+                if is_shortener(host) and URL_RESOLVE_ENABLED:

+                    dest = _resolve(u)

+                    host = urlparse(dest).netloc or host

+                rep = check_domain_reputation(host)

+                if rep in ('black','sus'):

+                    suspicious.append((u, dest, rep))

+            except Exception:

+                continue

+

+        if not suspicious:

+            return

+

+        levels = [rep for _,_,rep in suspicious]

+        level = 'black' if ('black' in levels) else 'sus'

+

+        if level == 'black' and URL_AUTOBAN_CRITICAL and message.guild and (message.guild.me and message.guild.me.guild_permissions.ban_members):

+            # autoban + delete

+            try:

+                await message.guild.ban(message.author, reason='Auto-ban: critical malicious URL', delete_message_days=0)

+            except Exception:

+                pass

+            try:

+                await message.delete()

+            except Exception:

+                pass

+            try:

+                await send_ban_embeds(message.guild, message.author, 'Auto-ban: critical malicious URL')

+            except Exception:

+                pass

+            try:

+                log_action(str(getattr(message.author,'id',0)), str(getattr(message.guild,'id',0)), 'url_black', 'auto_ban', {'urls': suspicious})

+            except Exception:

+                pass

+        else:

+            # delete only for 'sus'

+            try:

+                await message.delete()

+            except Exception:

+                pass

+            try:

+                log_action(str(getattr(message.author,'id',0)), str(getattr(message.guild,'id',0)), 'url_sus', 'delete', {'urls': suspicious})

+            except Exception:

+                pass

+    except Exception:

+        return

 

 from modules.discord_bot.helpers.url_check import extract_urls, normalize_domain, check_domain_reputation, is_shortener

 from modules.discord_bot.helpers.permissions import is_exempt_user, is_whitelisted_channel  # permissions import

@@ -145,11 +221,87 @@
         return None

     import requests

 

+

+from modules.discord_bot.helpers.url_check import extract_urls, normalize_domain, check_domain_reputation, is_shortener

+from modules.discord_bot.helpers.permissions import is_exempt_user, is_whitelisted_channel

+from modules.discord_bot.helpers.db import log_action

+from modules.discord_bot.helpers.log_utils import send_ban_embeds

+from modules.discord_bot.helpers.config_manager import get_flag

+from urllib.parse import urlparse

+

+URL_RESOLVE_ENABLED = str(get_flag("URL_RESOLVE_ENABLED", "true")).lower()=="true"

+URL_AUTOBAN_CRITICAL = str(get_flag("URL_AUTOBAN_CRITICAL","true")).lower()=="true"

+

+def _resolve(u: str, timeout: float = 4.0) -> str:

+    try:

+        import requests

+        r = requests.get(u, timeout=timeout, allow_redirects=True)

+        return r.url or u

+    except Exception:

+        return u

+

 async def _handle_urls_impl(message, bot):

-    try:

-        pass

-    except Exception:

-        pass

+    # Skip whitelisted channel/role or bots

+    try:

+        if is_whitelisted_channel(getattr(message,'channel',None)) or is_exempt_user(getattr(message,'author',None)):

+            return

+        if getattr(message.author, 'bot', False):

+            return

+        content = message.content or ''

+        urls = extract_urls(content)

+        if not urls:

+            return

+

+        suspicious = []

+        for u in urls:

+            dest = u

+            try:

+                host = urlparse(u).netloc

+                if is_shortener(host) and URL_RESOLVE_ENABLED:

+                    dest = _resolve(u)

+                    host = urlparse(dest).netloc or host

+                rep = check_domain_reputation(host)

+                if rep in ('black','sus'):

+                    suspicious.append((u, dest, rep))

+            except Exception:

+                continue

+

+        if not suspicious:

+            return

+

+        levels = [rep for _,_,rep in suspicious]

+        level = 'black' if ('black' in levels) else 'sus'

+

+        if level == 'black' and URL_AUTOBAN_CRITICAL and message.guild and (message.guild.me and message.guild.me.guild_permissions.ban_members):

+            # autoban + delete

+            try:

+                await message.guild.ban(message.author, reason='Auto-ban: critical malicious URL', delete_message_days=0)

+            except Exception:

+                pass

+            try:

+                await message.delete()

+            except Exception:

+                pass

+            try:

+                await send_ban_embeds(message.guild, message.author, 'Auto-ban: critical malicious URL')

+            except Exception:

+                pass

+            try:

+                log_action(str(getattr(message.author,'id',0)), str(getattr(message.guild,'id',0)), 'url_black', 'auto_ban', {'urls': suspicious})

+            except Exception:

+                pass

+        else:

+            # delete only for 'sus'

+            try:

+                await message.delete()

+            except Exception:

+                pass

+            try:

+                log_action(str(getattr(message.author,'id',0)), str(getattr(message.guild,'id',0)), 'url_sus', 'delete', {'urls': suspicious})

+            except Exception:

+                pass

+    except Exception:

+        return

 , json as _json

     # Use domains endpoint for simplicity

     try:

